<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on hackftz</title><link>https://hackftz.github.io/post/</link><description>Recent content in Posts on hackftz</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 15 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://hackftz.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>git clone很慢 怎么办？是不是用了 解析github.global.ssl.fastly.net ip？？</title><link>https://hackftz.github.io/post/2020/10/15/hacker-with-horn/</link><pubDate>Thu, 15 Oct 2020 00:00:00 +0000</pubDate><guid>https://hackftz.github.io/post/2020/10/15/hacker-with-horn/</guid><description>网上很多人说的修改host方法，已经行不通了。。
199.232.69.194 github.global.ssl.fastly.net这个方法使用后速度会降低很多，实测从100多k降到10k，实在是有点坑！</description></item><item><title>深入理解TypeScript——文档篇之枚举</title><link>https://hackftz.github.io/post/2020/10/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E6%9E%9A%E4%B8%BE/</link><pubDate>Tue, 13 Oct 2020 00:00:00 +0000</pubDate><guid>https://hackftz.github.io/post/2020/10/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E6%9E%9A%E4%B8%BE/</guid><description>一、概念 使用枚举我们可以定义一些带名字的常量。 我理解的是使用枚举，可以解决我们在项目中定义常量不规范的问题。
数字枚举
// 使用初始化器 enum Direction { // 定义数字枚举 Up = 1, // 使用初始化器，初始值1 Down, // 2 Left, // 3 Right // 4 // ...定义依次递增 } // 不使用初始化器 enum Direction { Up, // 0 Down, // 1 Left, Right, } 通过枚举的属性来访问枚举成员，和枚举的名字来访问枚举类型
enum Response { No = 0, Yes = 1, } function respond(recipient: string, message: Response): void { console.log(recipient + &amp;#39; &amp;#39; + message); } respond(&amp;#34;Princess Caroline&amp;#34;, Response.</description></item><item><title>深入理解TypeScript——文档篇之泛型</title><link>https://hackftz.github.io/post/2020/10/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E6%B3%9B%E5%9E%8B/</link><pubDate>Tue, 13 Oct 2020 00:00:00 +0000</pubDate><guid>https://hackftz.github.io/post/2020/10/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E6%B3%9B%E5%9E%8B/</guid><description>一、介绍 类型变量，它是一种特殊的变量，只用于表示类型而不是值。
function identity&amp;lt;T&amp;gt;(arg: T): T { // 声明带有泛型的函数 return arg; } 二、使用 传入所有的参数，包含类型参数：
let output = identity&amp;lt;string&amp;gt;(&amp;#34;myString&amp;#34;); // type of output will be &amp;#39;string&amp;#39; 类型推论
let output = identity(&amp;#34;myString&amp;#34;); // type of output will be &amp;#39;string&amp;#39; 编译器可以查看myString的值，然后把T设置为它的类型。 类型推论帮助我们保持代码精简和高可读性。如果编译器不能够自动地推断出类型的话，只能像上面那样明确的传入T的类型，在一些复杂的情况下，这是可能出现的。
三、类型 类型参数在最前面。
function identity&amp;lt;T&amp;gt;(arg: T): T { return arg; } let myIdentity: &amp;lt;T&amp;gt;(arg: T) =&amp;gt; T = identity; 可以使用不同的泛型参数名。
function identity&amp;lt;T&amp;gt;(arg: T): T { return arg; } let myIdentity: &amp;lt;U&amp;gt;(arg: U) =&amp;gt; U = identity; 使用带有调用签名的对象字面量来定义。</description></item><item><title>深入理解TypeScript——文档篇之类型推断</title><link>https://hackftz.github.io/post/2020/10/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD/</link><pubDate>Tue, 13 Oct 2020 00:00:00 +0000</pubDate><guid>https://hackftz.github.io/post/2020/10/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD/</guid><description>一、基础 TypeScript里，在有些没有明确指出类型的地方，类型推论会帮助提供类型
let x = 3; // let x: number 二、最佳通用类型 计算通用类型算法会考虑所有的候选类型，并给出一个兼容所有候选类型的类型。
// demo 1 let x = [0, 1, null, &amp;#39;haha&amp;#39;]; // let x: (string | number | null)[] // demo 2 class Rhino { constructor() { } } class Elephant { constructor() { } } class Snake { constructor() { } } let zoo = [new Rhino(), new Elephant(), new Snake()]; // let zoo: (Rhino | Elephant | Snake)[] 三、上下文类型 TypeScript类型推论也可能按照相反的方向进行。 这被叫做“按上下文归类”。按上下文归类会发生在表达式的类型与所处的位置相关时。</description></item><item><title>Plan 2020,Oct</title><link>https://hackftz.github.io/post/2020/10/12/hacker-with-horn/</link><pubDate>Mon, 12 Oct 2020 00:00:00 +0000</pubDate><guid>https://hackftz.github.io/post/2020/10/12/hacker-with-horn/</guid><description>深入理解ts语法、用法、源码分析（暂时不用） 深入理解react 近版本迭代区别以及为何、语法、用法、源码分析 每天阅读至少三篇技术博客 阅读完在这里进行打卡record 打卡 2020-10-22
useState用法指南
hooks中useState返回setXXX的用法，一种参数是直接赋值，一种是参数是匿名函数，两种之间的区别是：同步过程下没有区别，异步情况下，由于匿名函数中可以获取到prevXXX，所以可以获取到上一次状态，因此会在倒计时完成时触发一次次更新。 2020-10-21
React 16 要更改组件的生命周期
废弃了 componentWillMount，新增了 getDerivedStateFromProps。
消失的 componentWillMount 与新增的 getSnapshotBeforeUpdate。 React 16 组件通信 父=&amp;gt;子： props
子=&amp;gt;父： props event
不同组件（兄弟组件）：(1) 弟弟 =&amp;gt; 父 =&amp;gt; 哥哥 (2) EventEmitter (发布订阅机制) 2020-10-15
Deferred实现
这个独立实现deferred在使用上来说不够优雅，Promise/A和Promise/A+更好。 深入研究-webkit-overflow-scrolling:touch及ios滚动
解决问题：safari上，当超出高度，页面往下滑时，浏览器底部的工具栏会随着页面一起晃动（向下滚动时会拉起底部工具栏），造成了很不好的体验。
解决方案：对inner content的min-height或者:after伪元素设置height加1%或1px。从而主动触发scrollbar。 ScrollFix.js：一个 iOS5 溢出滚动的（有限）修复方案
ScrollFix 的原理是这样的，在触摸开始时，如果发现滚动区域已经处于极限状态时，就手工设置 scrollTop 的值，将滚动内容向边缘方向偏移 1px（这实际上改变了滚动区域的极限状态），从而诱使浏览器对滚动区块使用橡皮筋效果，而不会把触摸事件向上传播到 DOM 树（引起整页滚动）。 javascript 的位操作符转换推断</description></item><item><title>深入理解TypeScript——文档篇之函数</title><link>https://hackftz.github.io/post/2020/10/12/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E5%87%BD%E6%95%B0/</link><pubDate>Mon, 12 Oct 2020 00:00:00 +0000</pubDate><guid>https://hackftz.github.io/post/2020/10/12/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E5%87%BD%E6%95%B0/</guid><description>一、函数类型 定义函数类型
// 函数式声明 function add(x: number, y: number): number { return x + y; } // 由变量指向的匿名函数 let myAdd = function(x: number, y: number): number { return x + y; }; 完整函数类型
let myAdd: (x: number, y: number) =&amp;gt; number = function(x: number, y: number): number { return x + y; }; 通常需要将类型抽离成接口，形成规范。
推断类型
函数定义赋值语句一边有类型。
// myAdd has the full function type let myAdd = function(x: number, y: number): number { return x + y; }; // The parameters `x` and `y` have the type number let myAdd: (baseValue: number, increment: number) =&amp;gt; number = function(x, y) { return x + y; }; 二、可选参数、默认参数 ​ ts中传递给一个函数的参数个数必须与函数期望的参数个数一致。</description></item><item><title>深入理解TypeScript——文档篇之接口</title><link>https://hackftz.github.io/post/2020/10/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E6%8E%A5%E5%8F%A3/</link><pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate><guid>https://hackftz.github.io/post/2020/10/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E6%8E%A5%E5%8F%A3/</guid><description>接口是ts的核心之一，它的作用就是先约定好，再在定义的地方检查各种数据结构。
一、鸭子辩型法 鸭式辨型：像鸭子一样走路、游泳和嘎嘎叫的鸟就是鸭子。如下：
interface Duck { walkLikeDuck(): any swim(): any gaga(): any } class Animal { walkLikeDuck() { console.log(&amp;#39;look!, I walk like a duck.&amp;#39;) } swim() { console.log(&amp;#39;YES! I can swim very well.&amp;#39;) } gaga() { console.log(&amp;#39;gaga&amp;#39;) } } let duck: Duck = new Animal() console.log(duck); 二、初识 理解为将函数、变量定义等等中的数据检查，抽离出来，成为接口。
三、可选属性（“option bags”模式） 与普通的接口定义差不多，只是在可选属性名字定义的后面加一个?符号。
interface SquareConfig { color?: string; width?: number; } 四、只读属性 一些对象属性只能在对象刚刚创建的时候修改其值。 你可以在属性名前用 readonly来指定只读属性:
interface Point { readonly x: number; readonly y: number; } TypeScript具有ReadonlyArray&amp;lt;T&amp;gt;类型，数组创建后再也不能被修改。</description></item><item><title>深入理解TypeScript——文档篇之类</title><link>https://hackftz.github.io/post/2020/10/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E7%B1%BB/</link><pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate><guid>https://hackftz.github.io/post/2020/10/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E7%B1%BB/</guid><description>一、js和ts类的区别 js是基于类的面向对象方式，构建父子类的继承结构，写起来不简洁，也不形象。ts则是以简洁明了的方式实现类的定义、继承、扩展等等。
之前我也提过，js最终会登录浏览器平台，但是至少不是现在，所以在下一个js时代之前，我们需要定ts来规范当前的客户端代码。
二、用ts实现类 class Greeter { greeting: string; constructor(message: string) { this.greeting = message; } greet() { return &amp;#34;Hello, &amp;#34; + this.greeting; } } let greeter = new Greeter(&amp;#34;world&amp;#34;); 三、继承 使用extends 关键字来继承。
class Animal { // Animal是基类，也叫超类 move(distanceInMeters: number = 0) { console.log(`Animal moved ${distanceInMeters}m.`); } } class Dog extends Animal { // Dog是派生自Animal的派生类，也叫子类 bark() { console.log(&amp;#39;Woof! Woof!&amp;#39;); } } const dog = new Dog(); dog.bark(); dog.move(10); 派生类的构造函数必须包含 &amp;ldquo;super&amp;rdquo; 调用。这是ts强制执行的一条重要规则。</description></item><item><title>深入理解TypeScript——文档篇之变量声明</title><link>https://hackftz.github.io/post/2020/09/29/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E/</link><pubDate>Tue, 29 Sep 2020 00:00:00 +0000</pubDate><guid>https://hackftz.github.io/post/2020/09/29/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E/</guid><description>一、var声明 使用var的好处：公用变量，作用域下都可以获取到值。
使用var的弊端：
var声明可以在包含它的函数，模块，命名空间或全局作用域内部任何位置被访问，也就是说，var可以在其赋值前被访问（undefined），即使其定义在代码块内。
function f(shouldInitialize: boolean) {
if (shouldInitialize) {
var x = 10;
}
return x;
}
f(true); // returns &amp;#39;10&amp;#39;
f(false); // returns &amp;#39;undefined&amp;#39;
var定义的变量可以重复定义，并且不会报错，所以会导致变量引用重叠。
function sumMatrix(matrix: number[][]) {
var sum = 0;
for (var i = 0; i &amp;lt; matrix.length; i++) {
var currentRow = matrix[i];
for (var i = 0; i &amp;lt; currentRow.length; i++) {
sum += currentRow[i];
}
}
return sum;
}
如果var定义的变量在for循环外部，并且for循环中为异步的输出，则会先执行同步循环，最后再走异步回调，那这样的话获取到的值就会是变量的最终值。</description></item><item><title>深入理解TypeScript——文档篇之基础类型</title><link>https://hackftz.github.io/post/2020/09/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B/</link><pubDate>Mon, 28 Sep 2020 00:00:00 +0000</pubDate><guid>https://hackftz.github.io/post/2020/09/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B/</guid><description>一、布尔 let isDone: boolean = false
二、数字 TypeScript里的所有数字都是浮点数。 这些浮点数的类型是 number。支持二、八、十、十六进制。
let decLiteral: number = 6;
let hexLiteral: number = 0xf00d;
let binaryLiteral: number = 0b1010;
let octalLiteral: number = 0o744;
三、字符串 支持单双引号，支持模版字符串。
let name: string = &amp;#34;bob&amp;#34;;
let sentence: string = `Hello, my name is ${ name }`
四、数组 let list: number[] = [1, 2, 3]; // 简单数组
let list: Array&amp;lt;number&amp;gt; = [1, 2, 3]; // 数组泛型
五、元祖 Tuple 元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。</description></item><item><title>深入理解TypeScript——扩展篇之CommonJS规范</title><link>https://hackftz.github.io/post/2020/09/25/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%89%A9%E5%B1%95%E7%AF%87%E4%B9%8Bcommonjs%E8%A7%84%E8%8C%83/</link><pubDate>Fri, 25 Sep 2020 00:00:00 +0000</pubDate><guid>https://hackftz.github.io/post/2020/09/25/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%89%A9%E5%B1%95%E7%AF%87%E4%B9%8Bcommonjs%E8%A7%84%E8%8C%83/</guid><description>TypeScript是编译器 也是一种规范。
通过tsconfig.json可以自定义开发配置，这里有一份官方JSON配置文件，可作为参考。
逼不得已，又熟悉了一波CommonJS规范，这里必须得感谢像阮一峰这样的大佬们（先驱们），在中国互联网迅速发展的大环境中，这些为我们指路的人，是值得尊敬的。
温故而知新，获益匪浅。CommonJS的规范制定是很有必要的，对于服务端（NodeJS）来说，它有着稳定的运行环境，而CommonJS的好处是让代码文件（JS文件）遵循它的规则，从读取到回收，都遵循一套近乎完美的极致，被高效的利用。
引CommonJS规范，做下重点摘录，方便回头翻看。
一、概述 每个模块都是一个局部环境，在某块内定义的变量、函数、类，都是私有的，在其他文件内不可见。
如果想在多个文件分享变量，必须定义为global对象的属性。
global.isTrue = true;
这样可以被全局引用，但是这个写法官方不推荐。我想不应该在单个模块文件中去定义这种全局变量。
如果真的有需要的话，可以统一一份全局文件或者环境变量去使用，方便维护。知乎上有专门针对这个问题的探讨，可作参考，不多赘述。
模块有“入口”和“出口”：模块可以比喻为一个超市，超市从批发市场引入（require）了一堆商品来售卖（export），人们从超市内去获取（require）这些商品。
CommonJS实现了以下几点
(1) 所有代码都运行在模块作用域，不会污染全局作用域。（源码中，module外层是一个函数，执行这个函数会导出exports对象）
(2) 模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存。（所以代码文件有改动的话，是需要重新启动程序的）
(3) 模块加载的顺序，按照其在代码中出现的顺序。
二、module对象 Node内部提供一个Module构建函数。所有模块都是Module的实例。 function Module(id, parent) {
this.id = id;
this.exports = {};
this.parent = parent;
// ...
}
module属性：
(1) module.id 模块的识别符，通常是带有绝对路径的模块文件名。
(2) module.filename 模块的文件名，带有绝对路径。
(3) module.loaded 返回一个布尔值，表示模块是否已经完成加载。
(4) module.parent 返回一个对象，表示调用该模块的模块。（判断是否为入口脚本，值为null则是入口脚本）
(5) module.children 返回一个数组，表示该模块要用到的其他模块。
(6) module.</description></item><item><title>深入理解TypeScript——第一章：上手篇</title><link>https://hackftz.github.io/post/2020/09/25/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%B8%8A%E6%89%8B%E7%AF%87/</link><pubDate>Fri, 25 Sep 2020 00:00:00 +0000</pubDate><guid>https://hackftz.github.io/post/2020/09/25/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%B8%8A%E6%89%8B%E7%AF%87/</guid><description>怎么定义TypeScript呢？ TypeScript是一个工具 是一个编译器
1、编译代码
TypeScript，通过它的能力，默认使用tsc命令，可以根据.ts为后缀名的文件生成一个新的js文件
2、类型注解
TypeScript里的类型注解是一种轻量级的为函数或变量添加约束的方式。TypeScript提供了静态的代码分析，它可以分析代码结构和提供的类型注解。
function doSth(who: string): string {
return &amp;quot;I want to say hello to &amp;quot; + who;
}
let who = 'her';
const doWhat = doSth(who);
console.log('doWhat:', doWhat)
// doWhat: I want say hello to her
这里插个题外话，如果部分语法产生error的话，要考虑tsconfig.json这样的配置文件（比如lib部分）是否支持了你需要的Javascript规范，如果不支持的话，建议使用polyfill
3、接口
允许我们在实现接口时候只要保证包含了接口要求的结构就可以
interface Girl {
hair: string;
face: string;
}
function describe(girl: Girl): string {
let words = 'she has '
let decs = Object.entries(girl)
let len = decs.</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on hackftz</title><link>https://hackftz.github.io/post/</link><description>Recent content in Posts on hackftz</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 10 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://hackftz.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>vue为什么一定要在数组对象上绑定唯一key值？</title><link>https://hackftz.github.io/post/2020/11/10/vue%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%80%E5%AE%9A%E8%A6%81%E5%9C%A8%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E4%B8%8A%E7%BB%91%E5%AE%9A%E5%94%AF%E4%B8%80key%E5%80%BC/</link><pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate><guid>https://hackftz.github.io/post/2020/11/10/vue%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%80%E5%AE%9A%E8%A6%81%E5%9C%A8%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E4%B8%8A%E7%BB%91%E5%AE%9A%E5%94%AF%E4%B8%80key%E5%80%BC/</guid><description>一、前言 我们在使用vue开发时，经常会用到table、select options等组件，vue插件经常会提示我们在使用v-for遍历数组对象的时候要给template dom绑定key值。大多数人知道这个会提升性能，到底是什么性能呢？请往下看
二、官方解释 vue官方文档对key值的描述是这样的：
当 Vue 正在更新使用 v-for 渲染的元素列表时，它默认使用“就地更新”的策略。如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序，而是就地更新每个元素，并且确保它们在每个索引位置正确渲染。这个类似 Vue 1.x 的 track-by=&amp;quot;$index&amp;rdquo;。
这个默认的模式是高效的，但是只适用于不依赖子组件状态或临时 DOM 状态 (例如：表单输入值) 的列表渲染输出。
为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一key attribute：
&amp;lt;div v-for=&amp;#34;item in items&amp;#34; v-bind:key=&amp;#34;item.id&amp;#34;&amp;gt; // id不可重复且唯一 &amp;lt;!-- 内容 --&amp;gt; &amp;lt;/div&amp;gt; 三、key作用 key值可赋值为：number | string | boolean (2.4.2 新增) | symbol (2.5.12 新增)
dom diff为vue2.0新增的 性能优化点。
key 的特殊 attribute 主要用在 Vue 的虚拟 DOM 算法，在新旧 nodes 对比时辨识 VNodes。如果不使用 key，Vue 会使用一种最大限度减少动态元素并且尽可能的尝试就地修改/复用相同类型元素的算法。而使用 key 时，它会基于 key 的变化重新排列元素顺序，并且会移除 key 不存在的元素。</description></item><item><title>使用gulp4自动生成一个reset.min.css</title><link>https://hackftz.github.io/post/2020/11/10/%E4%BD%BF%E7%94%A8gulp4%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AAreset.min.css/</link><pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate><guid>https://hackftz.github.io/post/2020/11/10/%E4%BD%BF%E7%94%A8gulp4%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AAreset.min.css/</guid><description>一、前言 团队需要开发一个前端开发脚手架，这里我要写一个reset.css文件，方便开发中使用。
因为不想只写一个临时文件，所以做成了一个工具。
好处就是，这样生成的文件可以在大多数项目中通用，可以大大减少css的代码量，提升项目性能。
项目地址：common-css-bag
二、项目目录 ├─ .gitignore ├─ config │ ├─ build.js │ ├─ clean.js │ ├─ concat.js │ └─ watch.js ├─ dist │ ├─ base.min.css │ ├─ box.min.css │ ├─ flex.min.css │ ├─ font.min.css │ └─ reset.min.css ├─ gulpfile.js ├─ index.css ├─ index.html ├─ package-lock.json ├─ package.json ├─ readme.md ├─ styles │ ├─ base.css // 基础reset │ ├─ box.css // 容器 │ ├─ flex.css // flex │ └─ font.</description></item><item><title>jsx dom嵌套层级太深 compose 组合/简化方法</title><link>https://hackftz.github.io/post/2020/11/03/jsx-dom%E5%B5%8C%E5%A5%97%E5%B1%82%E7%BA%A7%E5%A4%AA%E6%B7%B1-compose-%E7%BB%84%E5%90%88/%E7%AE%80%E5%8C%96%E6%96%B9%E6%B3%95/</link><pubDate>Tue, 03 Nov 2020 00:00:00 +0000</pubDate><guid>https://hackftz.github.io/post/2020/11/03/jsx-dom%E5%B5%8C%E5%A5%97%E5%B1%82%E7%BA%A7%E5%A4%AA%E6%B7%B1-compose-%E7%BB%84%E5%90%88/%E7%AE%80%E5%8C%96%E6%96%B9%E6%B3%95/</guid><description>摘自我在 BAT 写 React 是如何进行性能优化的
一、前言 react开发中，组件嵌套太深，怎么组合多个jsx dom的方法
二、 // 嵌套层级太深 const StateProviders = ({ children }) =&amp;gt; ( &amp;lt;LogProvider&amp;gt; &amp;lt;UserProvider&amp;gt; &amp;lt;MenuProvider&amp;gt; &amp;lt;AppProvider&amp;gt; {children} &amp;lt;/AppProvider&amp;gt; &amp;lt;/MenuProvider&amp;gt; &amp;lt;/UserProvider&amp;gt; &amp;lt;/LogProvider&amp;gt; ) function App() { return ( &amp;lt;StateProviders&amp;gt; &amp;lt;Main /&amp;gt; &amp;lt;/StateProviders&amp;gt; ) } // 简化 function composeProviders(...providers) { return ({ children }) =&amp;gt; providers.reduce( (prev, Provider) =&amp;gt; &amp;lt;Provider&amp;gt;{prev}&amp;lt;/Provider&amp;gt;, children, ) } const StateProviders = composeProviders( LogProvider, UserProvider, MenuProvider, AppProvider, ) function App() { return ( &amp;lt;StateProvider&amp;gt; &amp;lt;Main /&amp;gt; &amp;lt;/StateProvider&amp;gt; ) }</description></item><item><title>vue怎样更好的判断slot插槽是否有内容下发？（vm.$slots和vm.scopedSlots对比）</title><link>https://hackftz.github.io/post/2020/11/02/vue%E6%80%8E%E6%A0%B7%E6%9B%B4%E5%A5%BD%E7%9A%84%E5%88%A4%E6%96%ADslot%E6%8F%92%E6%A7%BD%E6%98%AF%E5%90%A6%E6%9C%89%E5%86%85%E5%AE%B9%E4%B8%8B%E5%8F%91vm.slots%E5%92%8Cvm.scopedslots%E5%AF%B9%E6%AF%94/</link><pubDate>Mon, 02 Nov 2020 00:00:00 +0000</pubDate><guid>https://hackftz.github.io/post/2020/11/02/vue%E6%80%8E%E6%A0%B7%E6%9B%B4%E5%A5%BD%E7%9A%84%E5%88%A4%E6%96%ADslot%E6%8F%92%E6%A7%BD%E6%98%AF%E5%90%A6%E6%9C%89%E5%86%85%E5%AE%B9%E4%B8%8B%E5%8F%91vm.slots%E5%92%8Cvm.scopedslots%E5%AF%B9%E6%AF%94/</guid><description>一、前言 先贴一下源码 怎么处理scopedSlots的
if (currentParent &amp;amp;&amp;amp; !element.forbidden) { if (element.elseif || element.else) { processIfConditions(element, currentParent) } else { if (element.slotScope) { // scoped slot // keep it in the children list so that v-else(-if) conditions can // find it as the prev node. const name = element.slotTarget || &amp;#39;&amp;#34;default&amp;#34;&amp;#39; ;(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element } currentParent.children.push(element) element.parent = currentParent } } 二、分析 在把template内容转为ast的过程当中，借用了数据算法中的堆栈技巧，将一个个vue dom解析为ast对象，从父到子插入到栈中，再重新构造一个ast树，在这个过程中，就对scopeSlot做了值的引用绑定。
三、解决问题 我们在项目中，做了封装search form和table list两个组件的封装，也就是search table这样一个集成了2个组件的通用组件，在这里使用了scope-slot插槽，某些页面是不需要更小的插槽组件传到子组件的，所以需要判断slot插槽下是否真实有内容存在。</description></item><item><title>Plan 2020,Nov</title><link>https://hackftz.github.io/post/2020/11/01/hacker-with-horn/</link><pubDate>Sun, 01 Nov 2020 00:00:00 +0000</pubDate><guid>https://hackftz.github.io/post/2020/11/01/hacker-with-horn/</guid><description>深入理解 ts 语法、用法、源码分析（暂时不用） 深入理解 react 近版本迭代区别以及为何、语法、用法、源码分析 每天阅读至少三篇技术博客 阅读完在这里进行打卡 record 打卡 2020-11-16
记自己的 vue vscode autofomat 配置 简洁不复杂 2020-11-11
vue3.0 中使用 postcss-pxtorem 目前比较主流的移动端适配方案 用 commitlint 规范团队的 git 提交信息 使用起来较简单，会根据 commitlint 配置校验提交信息是否符合要求 前端提交信息规范——commitlint 2020-11-10
详解 vue 的 diff 算法 2020-11-09
Normalize.css 样式作用，及使用方法 common-css-bag——minify css 工具 2020-11-05
nextTick 为什么在 Promise then 之前执行 nextTick 源码解析 2020-11-04</description></item><item><title>深入理解TypeScript——文档篇之Symbols</title><link>https://hackftz.github.io/post/2020/10/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8Bsymbols/</link><pubDate>Wed, 28 Oct 2020 00:00:00 +0000</pubDate><guid>https://hackftz.github.io/post/2020/10/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8Bsymbols/</guid><description>一、介绍 Symbol是一种新的原生类型。
symbol类型的值是通过Symbol构造函数创建的。
let sym1 = Symbol(); let sym2 = Symbol(&amp;#34;key&amp;#34;); // 可选的字符串key 二、特性 不可改变且唯一 let sym2 = Symbol(&amp;#34;key&amp;#34;); let sym3 = Symbol(&amp;#34;key&amp;#34;); sym2 === sym3; // false, symbols是唯一的 symbols可以像字符串一样用做对象属性的键 let sym = Symbol(); let obj = { [sym]: &amp;#34;value&amp;#34; }; console.log(obj[sym]); // &amp;#34;value&amp;#34; 成员函数 const getClassNameSymbol = Symbol(); class C { [getClassNameSymbol](){ return &amp;#34;C&amp;#34;; } } let c = new C(); let className = c[getClassNameSymbol](); // &amp;#34;C&amp;#34; 三、内置symbols 内置symbols用来表示语言内部的行为。</description></item><item><title>深入理解TypeScript——文档篇之模块</title><link>https://hackftz.github.io/post/2020/10/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E6%A8%A1%E5%9D%97/</link><pubDate>Wed, 28 Oct 2020 00:00:00 +0000</pubDate><guid>https://hackftz.github.io/post/2020/10/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E6%A8%A1%E5%9D%97/</guid><description>一、前提 ts1.5术语变化，“内部模块”现在称做“命名空间”。 “外部模块”现在则简称为“模块”。
二、介绍 模块在其自身的作用域里执行，而不是在全局作用域里。这意味着定义在一个模块里的变量，函数，类等等在模块外部是不可见的，除非你明确地使用export形式之一导出它们。 相反，如果想使用其它模块导出的变量，函数，类，接口等的时候，你必须要导入它们，可以使用 import形式之一。 模块是自声明的；两个模块之间的关系是通过在文件级别上使用imports和exports建立的。 模块使用模块加载器去导入其它的模块。 在运行时，模块加载器的作用是在执行此模块代码前去查找并执行这个模块的所有依赖。 大家最熟知的JavaScript模块加载器是服务于Node.js的 CommonJS和服务于Web应用的Require.js。 TypeScript与ECMAScript 2015一样，任何包含顶级import或者export的文件都被当成一个模块。相反地，如果一个文件不带有顶级的import或者export声明，那么它的内容被视为全局可见的（因此对模块也是可见的）。 三、导出 导出声明 任何声明（比如变量，函数，类，类型别名或接口）都能够通过添加export关键字来导出。 export interface StringValidator { isAcceptable(s: string): boolean; } export const numberRegexp = /^[0-9]+$/; export class ZipCodeValidator implements StringValidator { isAcceptable(s: string) { return s.length === 5 &amp;amp;&amp;amp; numberRegexp.test(s); } } 导出语句（重命名） class ZipCodeValidator implements StringValidator { isAcceptable(s: string) { return s.length === 5 &amp;amp;&amp;amp; numberRegexp.test(s); } } export { ZipCodeValidator }; export { ZipCodeValidator as mainValidator }; 重新导出 扩展其它模块，并且只导出那个模块的部分内容。 重新导出功能并不会在当前模块导入那个模块或定义一个新的局部变量。 export class ParseIntBasedZipCodeValidator { isAcceptable(s: string) { return s.</description></item><item><title>深入理解TypeScript——文档篇之迭代器和生成器</title><link>https://hackftz.github.io/post/2020/10/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/</link><pubDate>Wed, 28 Oct 2020 00:00:00 +0000</pubDate><guid>https://hackftz.github.io/post/2020/10/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/</guid><description>一、 可迭代性 定义：当一个对象实现了Symbol.iterator属性时，我们认为它是可迭代的。 一些内置的类型如 Array，Map，Set，String，Int32Array，Uint32Array等都已经实现了各自的Symbol.iterator。 对象上的 Symbol.iterator函数负责返回供迭代的值。
for..of vs. for..in 语句 for..of和for..in均可迭代一个列表；但是用于迭代的值却不同。 let list = [4, 5, 6]; for (let i in list) { console.log(i); // &amp;#34;0&amp;#34;, &amp;#34;1&amp;#34;, &amp;#34;2&amp;#34;, // for..in迭代的是对象的 键 } for (let i of list) { console.log(i); // &amp;#34;4&amp;#34;, &amp;#34;5&amp;#34;, &amp;#34;6&amp;#34; // for..of则迭代对象的键对应的值。 } 内置对象Map和Set已经实现了Symbol.iterator方法，让我们可以访问它们保存的值。
但是不能在ts文件下像下面这样使用： let pets = new Set([&amp;#34;Cat&amp;#34;, &amp;#34;Dog&amp;#34;, &amp;#34;Hamster&amp;#34;]); pets[&amp;#34;species&amp;#34;] = &amp;#34;mammals&amp;#34;; // 元素隐式具有 &amp;#34;any&amp;#34; 类型，因为类型为 &amp;#34;&amp;#34;species&amp;#34;&amp;#34; 的表达式不能用于索引类型 &amp;#34;Set&amp;lt;string&amp;gt;&amp;#34;。 类型“Set&amp;lt;string&amp;gt;”上不存在属性“species”。 for (let pet in pets) { console.</description></item><item><title>深入理解TypeScript——文档篇之高级类型</title><link>https://hackftz.github.io/post/2020/10/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E9%AB%98%E7%BA%A7%E7%B1%BB%E5%9E%8B/</link><pubDate>Wed, 28 Oct 2020 00:00:00 +0000</pubDate><guid>https://hackftz.github.io/post/2020/10/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E9%AB%98%E7%BA%A7%E7%B1%BB%E5%9E%8B/</guid><description>一、交叉类型 交叉类型是将多个类型合并为一个类型。 这让我们可以把现有的多种类型叠加到一起成为一种类型，它包含了所需的所有类型的特性。
二、联合类型 联合类型表示一个值可以是几种类型之一。 我们用竖线（ |）分隔每个类型，所以 number | string | boolean表示一个值可以是 number， string，或 boolean。
/** * Takes a string and adds &amp;#34;padding&amp;#34; to the left. * If &amp;#39;padding&amp;#39; is a string, then &amp;#39;padding&amp;#39; is appended to the left side. * If &amp;#39;padding&amp;#39; is a number, then that number of spaces is added to the left side. */ function padLeft(value: string, padding: string | number) { // ... } let indentedString = padLeft(&amp;#34;Hello world&amp;#34;, true); 如果一个值是联合类型，我们只能访问此联合类型的所有类型里共有的成员。</description></item><item><title>如何用vue实现一个矩形标记功能（rectangle marker）</title><link>https://hackftz.github.io/post/2020/10/27/%E5%A6%82%E4%BD%95%E7%94%A8vue%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%9F%A9%E5%BD%A2%E6%A0%87%E8%AE%B0%E5%8A%9F%E8%83%BDrectangle-marker/</link><pubDate>Tue, 27 Oct 2020 00:00:00 +0000</pubDate><guid>https://hackftz.github.io/post/2020/10/27/%E5%A6%82%E4%BD%95%E7%94%A8vue%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%9F%A9%E5%BD%A2%E6%A0%87%E8%AE%B0%E5%8A%9F%E8%83%BDrectangle-marker/</guid><description>代码地址：vue-rectangle-marker
一、前言 一些cms系统经常会用到区域标记功能，所以写了个用vue实现的矩形标记区域，包含拖拽、放大缩小、重置功能。
二、实现结果 初始 标记
三、代码实现 &amp;lt;template&amp;gt; &amp;lt;div class=&amp;#34;rectangle-marker&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;mark-wrap&amp;#34;&amp;gt; &amp;lt;img ref=&amp;#34;backImg&amp;#34; :src=&amp;#34;imgUrl&amp;#34; class=&amp;#34;img-responsive&amp;#34; alt=&amp;#34;响应式图像&amp;#34; @load=&amp;#34;onload&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;draw-rect&amp;#34; :class=&amp;#34;{ &amp;#39;no-event&amp;#39;: disabled }&amp;#34; @mousemove=&amp;#34;mouseMove&amp;#34; @mousedown=&amp;#34;mouseDown&amp;#34; @mouseup=&amp;#34;mouseUp&amp;#34;&amp;gt; &amp;lt;div ref=&amp;#34;box&amp;#34; v-if=&amp;#34;boxVisible&amp;#34; :id=&amp;#34;boxId&amp;#34; class=&amp;#34;box&amp;#34; :style=&amp;#34;{ width: boxW + &amp;#39;px&amp;#39;, height: boxH + &amp;#39;px&amp;#39;, left: boxL + &amp;#39;px&amp;#39;, top: boxT + &amp;#39;px&amp;#39; }&amp;#34;&amp;gt; &amp;lt;div id=&amp;#34;upleftbtn&amp;#34; class=&amp;#34;upleftbtn&amp;#34; @mousedown=&amp;#34;onUpleftbtn&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div id=&amp;#34;uprightbtn&amp;#34; class=&amp;#34;uprightbtn&amp;#34; @mousedown=&amp;#34;onUpRightbtn&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div id=&amp;#34;downleftbtn&amp;#34; class=&amp;#34;downleftbtn&amp;#34; @mousedown=&amp;#34;onDownleftbtn&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div id=&amp;#34;downrightbtn&amp;#34; class=&amp;#34;downrightbtn&amp;#34; @mousedown=&amp;#34;onDownRightbtn&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;transition name=&amp;#34;fade&amp;#34;&amp;gt; &amp;lt;div v-if=&amp;#34;showBtns &amp;amp;&amp;amp; !</description></item><item><title>如何实现一个FormData</title><link>https://hackftz.github.io/post/2020/10/26/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAformdata/</link><pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate><guid>https://hackftz.github.io/post/2020/10/26/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAformdata/</guid><description>一、前言 最近项目中遇到一个问题，我们需要在cocos项目里去上传音频文件，而cocos原生环境和平时我们开发所在的浏览器环境和Node环境有很多差异，而cocos环境只提供了基础类，没有提供FormData这种封装类。
所以问题来了？如何实现一个FormData，以及怎么去使用它？
二、浏览器中的FormData 这里我列一个最简单的例子，我们来看看FormData到底是什么。 \
function App() { const [name, setName] = useState(&amp;#39;&amp;#39;) const [age, setAge] = useState(0) const [file, setFile] = useState&amp;lt;File | null&amp;gt;() const submit = () =&amp;gt; { console.log(name, age); console.log(file); var fd = new FormData() fd.append(&amp;#39;name&amp;#39;, name) fd.append(&amp;#39;age&amp;#39;, age.toString()) fd.append(&amp;#39;file&amp;#39;, file as Blob) $.ajax({ type: &amp;#34;POST&amp;#34;, url: &amp;#34;www.happy.com&amp;#34;, data: fd, processData: false,//重要 contentType: &amp;#39;multipart/form-data&amp;#39;,//重要 success: function (data: any) { } }) } return ( &amp;lt;div className=&amp;#34;App&amp;#34;&amp;gt; &amp;lt;form action=&amp;#34;form_action.</description></item><item><title>git clone很慢 怎么办？是不是用了 解析github.global.ssl.fastly.net ip？？</title><link>https://hackftz.github.io/post/2020/10/15/hacker-with-horn/</link><pubDate>Thu, 15 Oct 2020 00:00:00 +0000</pubDate><guid>https://hackftz.github.io/post/2020/10/15/hacker-with-horn/</guid><description>网上很多人说的修改host方法，已经行不通了。。
199.232.69.194 github.global.ssl.fastly.net这个方法使用后速度会降低很多，实测从100多k降到10k，实在是有点坑！</description></item><item><title>深入理解TypeScript——文档篇之枚举</title><link>https://hackftz.github.io/post/2020/10/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E6%9E%9A%E4%B8%BE/</link><pubDate>Tue, 13 Oct 2020 00:00:00 +0000</pubDate><guid>https://hackftz.github.io/post/2020/10/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E6%9E%9A%E4%B8%BE/</guid><description>一、概念 使用枚举我们可以定义一些带名字的常量。 我理解的是使用枚举，可以解决我们在项目中定义常量不规范的问题。
数字枚举
// 使用初始化器 enum Direction { // 定义数字枚举 Up = 1, // 使用初始化器，初始值1 Down, // 2 Left, // 3 Right // 4 // ...定义依次递增 } // 不使用初始化器 enum Direction { Up, // 0 Down, // 1 Left, Right, } 通过枚举的属性来访问枚举成员，和枚举的名字来访问枚举类型
enum Response { No = 0, Yes = 1, } function respond(recipient: string, message: Response): void { console.log(recipient + &amp;#39; &amp;#39; + message); } respond(&amp;#34;Princess Caroline&amp;#34;, Response.</description></item><item><title>深入理解TypeScript——文档篇之泛型</title><link>https://hackftz.github.io/post/2020/10/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E6%B3%9B%E5%9E%8B/</link><pubDate>Tue, 13 Oct 2020 00:00:00 +0000</pubDate><guid>https://hackftz.github.io/post/2020/10/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E6%B3%9B%E5%9E%8B/</guid><description>一、介绍 类型变量，它是一种特殊的变量，只用于表示类型而不是值。
function identity&amp;lt;T&amp;gt;(arg: T): T { // 声明带有泛型的函数 return arg; } 二、使用 传入所有的参数，包含类型参数：
let output = identity&amp;lt;string&amp;gt;(&amp;#34;myString&amp;#34;); // type of output will be &amp;#39;string&amp;#39; 类型推论
let output = identity(&amp;#34;myString&amp;#34;); // type of output will be &amp;#39;string&amp;#39; 编译器可以查看myString的值，然后把T设置为它的类型。 类型推论帮助我们保持代码精简和高可读性。如果编译器不能够自动地推断出类型的话，只能像上面那样明确的传入T的类型，在一些复杂的情况下，这是可能出现的。
三、类型 类型参数在最前面。
function identity&amp;lt;T&amp;gt;(arg: T): T { return arg; } let myIdentity: &amp;lt;T&amp;gt;(arg: T) =&amp;gt; T = identity; 可以使用不同的泛型参数名。
function identity&amp;lt;T&amp;gt;(arg: T): T { return arg; } let myIdentity: &amp;lt;U&amp;gt;(arg: U) =&amp;gt; U = identity; 使用带有调用签名的对象字面量来定义。</description></item><item><title>深入理解TypeScript——文档篇之类型推断</title><link>https://hackftz.github.io/post/2020/10/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD/</link><pubDate>Tue, 13 Oct 2020 00:00:00 +0000</pubDate><guid>https://hackftz.github.io/post/2020/10/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD/</guid><description>一、基础 TypeScript里，在有些没有明确指出类型的地方，类型推论会帮助提供类型
let x = 3; // let x: number 二、最佳通用类型 计算通用类型算法会考虑所有的候选类型，并给出一个兼容所有候选类型的类型。
// demo 1 let x = [0, 1, null, &amp;#39;haha&amp;#39;]; // let x: (string | number | null)[] // demo 2 class Rhino { constructor() { } } class Elephant { constructor() { } } class Snake { constructor() { } } let zoo = [new Rhino(), new Elephant(), new Snake()]; // let zoo: (Rhino | Elephant | Snake)[] 三、上下文类型 TypeScript类型推论也可能按照相反的方向进行。 这被叫做“按上下文归类”。按上下文归类会发生在表达式的类型与所处的位置相关时。</description></item><item><title>Plan 2020,Oct</title><link>https://hackftz.github.io/post/2020/10/12/hacker-with-horn/</link><pubDate>Mon, 12 Oct 2020 00:00:00 +0000</pubDate><guid>https://hackftz.github.io/post/2020/10/12/hacker-with-horn/</guid><description>深入理解ts语法、用法、源码分析（暂时不用） 深入理解react 近版本迭代区别以及为何、语法、用法、源码分析 每天阅读至少三篇技术博客 阅读完在这里进行打卡record 打卡 2020-10-31
云服务器zsh配置 （Powerlevel10k theme zsh5.0.2版本未升级到5.1无法使用） 云服务器 防火墙部分端口向外开放 nginx static html 部署 vue-router history mode下 refreseh404的问题解决 2020-10-30
CentOS 7 下安装 Nginx vm.$slots和vm.$scopedSlots vue 3 推荐使用vm.$scopedSlots来访问作用域（slot-scope）插槽 2020-10-28
【TypeScript】类型定义文件(*.d.ts) TypeScript声明文件（.d.ts）的使用 2020-10-26
useMemo和useCallback的使用
useMemo：
官方解释：把“创建”函数和依赖项数组作为参数传入 useMemo，它仅会在某个依赖项改变时才重新计算 memoized 值。这种优化有助于避免在每次渲染时都进行高开销的计算。
个人定义：useMemo是为了减少不必要的重复计算。如果依赖无变化，会使用缓存的值；依赖变化的话，计算执行，并替换缓存值。
useCallback：
官方定义：把内联回调函数及依赖项数组作为参数传入 useCallback，它将返回该回调函数的 memoized 版本，该回调函数仅在某个依赖项改变时才会更新。当你把回调函数传递给经过优化的并使用引用相等性去避免非必要渲染（例如 shouldComponentUpdate）的子组件时，它将非常有用。
个人定义：当你把回调函数传递给经过优化的并使用引用相等性去避免非必要渲染（例如 shouldComponentUpdate）的子组件时，它将非常有用。也就是说父组件传递一个函数给子组件的时候，由于父组件的更新会导致该函数重新生成从而传递给子组件的函数引用发生了变化，这就会导致子组件也会更新，而很多时候子组件的更新是没必要的，所以我们可以通过useCallback来缓存该函数，然后传递给子组件。 上传文件multipart form-data boundary 说明 formdata实现原理（后续梳理，已发博客） 2020-10-25</description></item><item><title>深入理解TypeScript——文档篇之函数</title><link>https://hackftz.github.io/post/2020/10/12/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E5%87%BD%E6%95%B0/</link><pubDate>Mon, 12 Oct 2020 00:00:00 +0000</pubDate><guid>https://hackftz.github.io/post/2020/10/12/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E5%87%BD%E6%95%B0/</guid><description>一、函数类型 定义函数类型
// 函数式声明 function add(x: number, y: number): number { return x + y; } // 由变量指向的匿名函数 let myAdd = function(x: number, y: number): number { return x + y; }; 完整函数类型
let myAdd: (x: number, y: number) =&amp;gt; number = function(x: number, y: number): number { return x + y; }; 通常需要将类型抽离成接口，形成规范。
推断类型
函数定义赋值语句一边有类型。
// myAdd has the full function type let myAdd = function(x: number, y: number): number { return x + y; }; // The parameters `x` and `y` have the type number let myAdd: (baseValue: number, increment: number) =&amp;gt; number = function(x, y) { return x + y; }; 二、可选参数、默认参数 ​ ts中传递给一个函数的参数个数必须与函数期望的参数个数一致。</description></item><item><title>深入理解TypeScript——文档篇之接口</title><link>https://hackftz.github.io/post/2020/10/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E6%8E%A5%E5%8F%A3/</link><pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate><guid>https://hackftz.github.io/post/2020/10/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E6%8E%A5%E5%8F%A3/</guid><description>接口是ts的核心之一，它的作用就是先约定好，再在定义的地方检查各种数据结构。
一、鸭子辩型法 鸭式辨型：像鸭子一样走路、游泳和嘎嘎叫的鸟就是鸭子。如下：
interface Duck { walkLikeDuck(): any swim(): any gaga(): any } class Animal { walkLikeDuck() { console.log(&amp;#39;look!, I walk like a duck.&amp;#39;) } swim() { console.log(&amp;#39;YES! I can swim very well.&amp;#39;) } gaga() { console.log(&amp;#39;gaga&amp;#39;) } } let duck: Duck = new Animal() console.log(duck); 二、初识 理解为将函数、变量定义等等中的数据检查，抽离出来，成为接口。
三、可选属性（“option bags”模式） 与普通的接口定义差不多，只是在可选属性名字定义的后面加一个?符号。
interface SquareConfig { color?: string; width?: number; } 四、只读属性 一些对象属性只能在对象刚刚创建的时候修改其值。 你可以在属性名前用 readonly来指定只读属性:
interface Point { readonly x: number; readonly y: number; } TypeScript具有ReadonlyArray&amp;lt;T&amp;gt;类型，数组创建后再也不能被修改。</description></item><item><title>深入理解TypeScript——文档篇之类</title><link>https://hackftz.github.io/post/2020/10/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E7%B1%BB/</link><pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate><guid>https://hackftz.github.io/post/2020/10/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E7%B1%BB/</guid><description>一、js和ts类的区别 js是基于类的面向对象方式，构建父子类的继承结构，写起来不简洁，也不形象。ts则是以简洁明了的方式实现类的定义、继承、扩展等等。
之前我也提过，js最终会登录浏览器平台，但是至少不是现在，所以在下一个js时代之前，我们需要定ts来规范当前的客户端代码。
二、用ts实现类 class Greeter { greeting: string; constructor(message: string) { this.greeting = message; } greet() { return &amp;#34;Hello, &amp;#34; + this.greeting; } } let greeter = new Greeter(&amp;#34;world&amp;#34;); 三、继承 使用extends 关键字来继承。
class Animal { // Animal是基类，也叫超类 move(distanceInMeters: number = 0) { console.log(`Animal moved ${distanceInMeters}m.`); } } class Dog extends Animal { // Dog是派生自Animal的派生类，也叫子类 bark() { console.log(&amp;#39;Woof! Woof!&amp;#39;); } } const dog = new Dog(); dog.bark(); dog.move(10); 派生类的构造函数必须包含 &amp;ldquo;super&amp;rdquo; 调用。这是ts强制执行的一条重要规则。</description></item><item><title>深入理解TypeScript——文档篇之变量声明</title><link>https://hackftz.github.io/post/2020/09/29/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E/</link><pubDate>Tue, 29 Sep 2020 00:00:00 +0000</pubDate><guid>https://hackftz.github.io/post/2020/09/29/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E/</guid><description>一、var声明 使用var的好处：公用变量，作用域下都可以获取到值。
使用var的弊端：
var声明可以在包含它的函数，模块，命名空间或全局作用域内部任何位置被访问，也就是说，var可以在其赋值前被访问（undefined），即使其定义在代码块内。
function f(shouldInitialize: boolean) {
if (shouldInitialize) {
var x = 10;
}
return x;
}
f(true); // returns &amp;#39;10&amp;#39;
f(false); // returns &amp;#39;undefined&amp;#39;
var定义的变量可以重复定义，并且不会报错，所以会导致变量引用重叠。
function sumMatrix(matrix: number[][]) {
var sum = 0;
for (var i = 0; i &amp;lt; matrix.length; i++) {
var currentRow = matrix[i];
for (var i = 0; i &amp;lt; currentRow.length; i++) {
sum += currentRow[i];
}
}
return sum;
}
如果var定义的变量在for循环外部，并且for循环中为异步的输出，则会先执行同步循环，最后再走异步回调，那这样的话获取到的值就会是变量的最终值。</description></item><item><title>深入理解TypeScript——文档篇之基础类型</title><link>https://hackftz.github.io/post/2020/09/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B/</link><pubDate>Mon, 28 Sep 2020 00:00:00 +0000</pubDate><guid>https://hackftz.github.io/post/2020/09/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B/</guid><description>一、布尔 let isDone: boolean = false
二、数字 TypeScript里的所有数字都是浮点数。 这些浮点数的类型是 number。支持二、八、十、十六进制。
let decLiteral: number = 6;
let hexLiteral: number = 0xf00d;
let binaryLiteral: number = 0b1010;
let octalLiteral: number = 0o744;
三、字符串 支持单双引号，支持模版字符串。
let name: string = &amp;#34;bob&amp;#34;;
let sentence: string = `Hello, my name is ${ name }`
四、数组 let list: number[] = [1, 2, 3]; // 简单数组
let list: Array&amp;lt;number&amp;gt; = [1, 2, 3]; // 数组泛型
五、元祖 Tuple 元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。</description></item><item><title>深入理解TypeScript——扩展篇之CommonJS规范</title><link>https://hackftz.github.io/post/2020/09/25/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%89%A9%E5%B1%95%E7%AF%87%E4%B9%8Bcommonjs%E8%A7%84%E8%8C%83/</link><pubDate>Fri, 25 Sep 2020 00:00:00 +0000</pubDate><guid>https://hackftz.github.io/post/2020/09/25/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%89%A9%E5%B1%95%E7%AF%87%E4%B9%8Bcommonjs%E8%A7%84%E8%8C%83/</guid><description>TypeScript是编译器 也是一种规范。
通过tsconfig.json可以自定义开发配置，这里有一份官方JSON配置文件，可作为参考。
逼不得已，又熟悉了一波CommonJS规范，这里必须得感谢像阮一峰这样的大佬们（先驱们），在中国互联网迅速发展的大环境中，这些为我们指路的人，是值得尊敬的。
温故而知新，获益匪浅。CommonJS的规范制定是很有必要的，对于服务端（NodeJS）来说，它有着稳定的运行环境，而CommonJS的好处是让代码文件（JS文件）遵循它的规则，从读取到回收，都遵循一套近乎完美的极致，被高效的利用。
引CommonJS规范，做下重点摘录，方便回头翻看。
一、概述 每个模块都是一个局部环境，在某块内定义的变量、函数、类，都是私有的，在其他文件内不可见。
如果想在多个文件分享变量，必须定义为global对象的属性。
global.isTrue = true;
这样可以被全局引用，但是这个写法官方不推荐。我想不应该在单个模块文件中去定义这种全局变量。
如果真的有需要的话，可以统一一份全局文件或者环境变量去使用，方便维护。知乎上有专门针对这个问题的探讨，可作参考，不多赘述。
模块有“入口”和“出口”：模块可以比喻为一个超市，超市从批发市场引入（require）了一堆商品来售卖（export），人们从超市内去获取（require）这些商品。
CommonJS实现了以下几点
(1) 所有代码都运行在模块作用域，不会污染全局作用域。（源码中，module外层是一个函数，执行这个函数会导出exports对象）
(2) 模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存。（所以代码文件有改动的话，是需要重新启动程序的）
(3) 模块加载的顺序，按照其在代码中出现的顺序。
二、module对象 Node内部提供一个Module构建函数。所有模块都是Module的实例。 function Module(id, parent) {
this.id = id;
this.exports = {};
this.parent = parent;
// ...
}
module属性：
(1) module.id 模块的识别符，通常是带有绝对路径的模块文件名。
(2) module.filename 模块的文件名，带有绝对路径。
(3) module.loaded 返回一个布尔值，表示模块是否已经完成加载。
(4) module.parent 返回一个对象，表示调用该模块的模块。（判断是否为入口脚本，值为null则是入口脚本）
(5) module.children 返回一个数组，表示该模块要用到的其他模块。
(6) module.</description></item><item><title>深入理解TypeScript——第一章：上手篇</title><link>https://hackftz.github.io/post/2020/09/25/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%B8%8A%E6%89%8B%E7%AF%87/</link><pubDate>Fri, 25 Sep 2020 00:00:00 +0000</pubDate><guid>https://hackftz.github.io/post/2020/09/25/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%B8%8A%E6%89%8B%E7%AF%87/</guid><description>怎么定义TypeScript呢？ TypeScript是一个工具 是一个编译器
1、编译代码
TypeScript，通过它的能力，默认使用tsc命令，可以根据.ts为后缀名的文件生成一个新的js文件
2、类型注解
TypeScript里的类型注解是一种轻量级的为函数或变量添加约束的方式。TypeScript提供了静态的代码分析，它可以分析代码结构和提供的类型注解。
function doSth(who: string): string {
return &amp;quot;I want to say hello to &amp;quot; + who;
}
let who = 'her';
const doWhat = doSth(who);
console.log('doWhat:', doWhat)
// doWhat: I want say hello to her
这里插个题外话，如果部分语法产生error的话，要考虑tsconfig.json这样的配置文件（比如lib部分）是否支持了你需要的Javascript规范，如果不支持的话，建议使用polyfill
3、接口
允许我们在实现接口时候只要保证包含了接口要求的结构就可以
interface Girl {
hair: string;
face: string;
}
function describe(girl: Girl): string {
let words = 'she has '
let decs = Object.entries(girl)
let len = decs.</description></item></channel></rss>
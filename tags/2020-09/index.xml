<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2020-09 on hackftz</title><link>https://hackftz.github.io/tags/2020-09/</link><description>Recent content in 2020-09 on hackftz</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 29 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://hackftz.github.io/tags/2020-09/index.xml" rel="self" type="application/rss+xml"/><item><title>深入理解TypeScript——文档篇之变量声明</title><link>https://hackftz.github.io/post/2020/09/29/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E/</link><pubDate>Tue, 29 Sep 2020 00:00:00 +0000</pubDate><guid>https://hackftz.github.io/post/2020/09/29/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E/</guid><description>一、var声明 使用var的好处：公用变量，作用域下都可以获取到值。
使用var的弊端：
var声明可以在包含它的函数，模块，命名空间或全局作用域内部任何位置被访问，也就是说，var可以在其赋值前被访问（undefined），即使其定义在代码块内。
function f(shouldInitialize: boolean) {
if (shouldInitialize) {
var x = 10;
}
return x;
}
f(true); // returns &amp;#39;10&amp;#39;
f(false); // returns &amp;#39;undefined&amp;#39;
var定义的变量可以重复定义，并且不会报错，所以会导致变量引用重叠。
function sumMatrix(matrix: number[][]) {
var sum = 0;
for (var i = 0; i &amp;lt; matrix.length; i++) {
var currentRow = matrix[i];
for (var i = 0; i &amp;lt; currentRow.length; i++) {
sum += currentRow[i];
}
}
return sum;
}
如果var定义的变量在for循环外部，并且for循环中为异步的输出，则会先执行同步循环，最后再走异步回调，那这样的话获取到的值就会是变量的最终值。</description></item><item><title>深入理解TypeScript——文档篇之基础类型</title><link>https://hackftz.github.io/post/2020/09/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B/</link><pubDate>Mon, 28 Sep 2020 00:00:00 +0000</pubDate><guid>https://hackftz.github.io/post/2020/09/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%96%87%E6%A1%A3%E7%AF%87%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B/</guid><description>一、布尔 let isDone: boolean = false
二、数字 TypeScript里的所有数字都是浮点数。 这些浮点数的类型是 number。支持二、八、十、十六进制。
let decLiteral: number = 6;
let hexLiteral: number = 0xf00d;
let binaryLiteral: number = 0b1010;
let octalLiteral: number = 0o744;
三、字符串 支持单双引号，支持模版字符串。
let name: string = &amp;#34;bob&amp;#34;;
let sentence: string = `Hello, my name is ${ name }`
四、数组 let list: number[] = [1, 2, 3]; // 简单数组
let list: Array&amp;lt;number&amp;gt; = [1, 2, 3]; // 数组泛型
五、元祖 Tuple 元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。</description></item><item><title>深入理解TypeScript——扩展篇之CommonJS规范</title><link>https://hackftz.github.io/post/2020/09/25/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%89%A9%E5%B1%95%E7%AF%87%E4%B9%8Bcommonjs%E8%A7%84%E8%8C%83/</link><pubDate>Fri, 25 Sep 2020 00:00:00 +0000</pubDate><guid>https://hackftz.github.io/post/2020/09/25/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E6%89%A9%E5%B1%95%E7%AF%87%E4%B9%8Bcommonjs%E8%A7%84%E8%8C%83/</guid><description>TypeScript是编译器 也是一种规范。
通过tsconfig.json可以自定义开发配置，这里有一份官方JSON配置文件，可作为参考。
逼不得已，又熟悉了一波CommonJS规范，这里必须得感谢像阮一峰这样的大佬们（先驱们），在中国互联网迅速发展的大环境中，这些为我们指路的人，是值得尊敬的。
温故而知新，获益匪浅。CommonJS的规范制定是很有必要的，对于服务端（NodeJS）来说，它有着稳定的运行环境，而CommonJS的好处是让代码文件（JS文件）遵循它的规则，从读取到回收，都遵循一套近乎完美的极致，被高效的利用。
引CommonJS规范，做下重点摘录，方便回头翻看。
一、概述 每个模块都是一个局部环境，在某块内定义的变量、函数、类，都是私有的，在其他文件内不可见。
如果想在多个文件分享变量，必须定义为global对象的属性。
global.isTrue = true;
这样可以被全局引用，但是这个写法官方不推荐。我想不应该在单个模块文件中去定义这种全局变量。
如果真的有需要的话，可以统一一份全局文件或者环境变量去使用，方便维护。知乎上有专门针对这个问题的探讨，可作参考，不多赘述。
模块有“入口”和“出口”：模块可以比喻为一个超市，超市从批发市场引入（require）了一堆商品来售卖（export），人们从超市内去获取（require）这些商品。
CommonJS实现了以下几点
(1) 所有代码都运行在模块作用域，不会污染全局作用域。（源码中，module外层是一个函数，执行这个函数会导出exports对象）
(2) 模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存。（所以代码文件有改动的话，是需要重新启动程序的）
(3) 模块加载的顺序，按照其在代码中出现的顺序。
二、module对象 Node内部提供一个Module构建函数。所有模块都是Module的实例。 function Module(id, parent) {
this.id = id;
this.exports = {};
this.parent = parent;
// ...
}
module属性：
(1) module.id 模块的识别符，通常是带有绝对路径的模块文件名。
(2) module.filename 模块的文件名，带有绝对路径。
(3) module.loaded 返回一个布尔值，表示模块是否已经完成加载。
(4) module.parent 返回一个对象，表示调用该模块的模块。（判断是否为入口脚本，值为null则是入口脚本）
(5) module.children 返回一个数组，表示该模块要用到的其他模块。
(6) module.</description></item><item><title>深入理解TypeScript——第一章：上手篇</title><link>https://hackftz.github.io/post/2020/09/25/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%B8%8A%E6%89%8B%E7%AF%87/</link><pubDate>Fri, 25 Sep 2020 00:00:00 +0000</pubDate><guid>https://hackftz.github.io/post/2020/09/25/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3typescript%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%B8%8A%E6%89%8B%E7%AF%87/</guid><description>怎么定义TypeScript呢？ TypeScript是一个工具 是一个编译器123
1、编译代码
TypeScript，通过它的能力，默认使用tsc命令，可以根据.ts为后缀名的文件生成一个新的js文件
2、类型注解
TypeScript里的类型注解是一种轻量级的为函数或变量添加约束的方式。TypeScript提供了静态的代码分析，它可以分析代码结构和提供的类型注解。
function doSth(who: string): string {
return &amp;quot;I want to say hello to &amp;quot; + who;
}
let who = 'her';
const doWhat = doSth(who);
console.log('doWhat:', doWhat)
// doWhat: I want say hello to her
这里插个题外话，如果部分语法产生error的话，要考虑tsconfig.json这样的配置文件（比如lib部分）是否支持了你需要的Javascript规范，如果不支持的话，建议使用polyfill
3、接口
允许我们在实现接口时候只要保证包含了接口要求的结构就可以
interface Girl {
hair: string;
face: string;
}
function describe(girl: Girl): string {
let words = 'she has '
let decs = Object.entries(girl)
let len = decs.</description></item></channel></rss>